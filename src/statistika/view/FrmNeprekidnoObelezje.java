/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package statistika.view;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import statistika.domain.NeprekidniTip;
import statistika.domain.PrekidniTip;

/**
 *
 * @author Paun
 */
public class FrmNeprekidnoObelezje extends javax.swing.JDialog {

    public NeprekidniTip nt;


    /**
     * Creates new form FrmNeprekidnoObelezje
     */
    public FrmNeprekidnoObelezje(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        prepareview();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtBrojRazlicitihObelezja = new javax.swing.JTextField();
        btnKreiraj = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNeprekidnoObelezje = new javax.swing.JTable();
        btnUzmiPodatkeIzTabele = new javax.swing.JButton();
        panelParametri = new javax.swing.JPanel();
        cbKAsimetrije = new javax.swing.JCheckBox();
        cbKSpljostenosti = new javax.swing.JCheckBox();
        cbKoeficijentVarijacije = new javax.swing.JCheckBox();
        cbRazmakVarijacije = new javax.swing.JCheckBox();
        cbSrednjaDevijacija = new javax.swing.JCheckBox();
        cbStandDevijacija = new javax.swing.JCheckBox();
        cbVarijansa = new javax.swing.JCheckBox();
        cbKvartilnaDevijacija = new javax.swing.JCheckBox();
        cbTreciKvartil = new javax.swing.JCheckBox();
        cbPrviKvartil = new javax.swing.JCheckBox();
        cbXBar = new javax.swing.JCheckBox();
        cbMedijana = new javax.swing.JCheckBox();
        cbModus = new javax.swing.JCheckBox();
        btnSelektujSve = new javax.swing.JButton();
        btnIzracunajParametre = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRezultati = new javax.swing.JTextArea();
        btnAutomatik = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Koliko ima razlicitih vrednosti datog obelezja:");

        btnKreiraj.setText("Kreiraj tabelu za podatke");
        btnKreiraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajActionPerformed(evt);
            }
        });

        tblNeprekidnoObelezje.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "br. intevala", "donja granica", "gornja granica", "srednji clan", "fi", "ci"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblNeprekidnoObelezje);
        if (tblNeprekidnoObelezje.getColumnModel().getColumnCount() > 0) {
            tblNeprekidnoObelezje.getColumnModel().getColumn(4).setPreferredWidth(15);
            tblNeprekidnoObelezje.getColumnModel().getColumn(5).setPreferredWidth(15);
        }

        btnUzmiPodatkeIzTabele.setText("Potvrdi unese podatke iz tabele!");
        btnUzmiPodatkeIzTabele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUzmiPodatkeIzTabeleActionPerformed(evt);
            }
        });

        panelParametri.setBorder(javax.swing.BorderFactory.createTitledBorder("Parametri"));

        cbKAsimetrije.setText("koeficijent asimetrije");
        cbKAsimetrije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKAsimetrijeActionPerformed(evt);
            }
        });

        cbKSpljostenosti.setText("koeficijent spoljostenosti");
        cbKSpljostenosti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKSpljostenostiActionPerformed(evt);
            }
        });

        cbKoeficijentVarijacije.setText("koeficijent varijacije");
        cbKoeficijentVarijacije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKoeficijentVarijacijeActionPerformed(evt);
            }
        });

        cbRazmakVarijacije.setText("razmak varijacije");
        cbRazmakVarijacije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRazmakVarijacijeActionPerformed(evt);
            }
        });

        cbSrednjaDevijacija.setText("srednja devijacija");
        cbSrednjaDevijacija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSrednjaDevijacijaActionPerformed(evt);
            }
        });

        cbStandDevijacija.setText("standardna devijacija");
        cbStandDevijacija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStandDevijacijaActionPerformed(evt);
            }
        });

        cbVarijansa.setText("varijansa");
        cbVarijansa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVarijansaActionPerformed(evt);
            }
        });

        cbKvartilnaDevijacija.setText("kvartilna devijacija");
        cbKvartilnaDevijacija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbKvartilnaDevijacijaActionPerformed(evt);
            }
        });

        cbTreciKvartil.setText("treci kvartil");
        cbTreciKvartil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTreciKvartilActionPerformed(evt);
            }
        });

        cbPrviKvartil.setText("prvi kvartil");
        cbPrviKvartil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPrviKvartilActionPerformed(evt);
            }
        });

        cbXBar.setText("xBar");
        cbXBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbXBarActionPerformed(evt);
            }
        });

        cbMedijana.setText("medijana");
        cbMedijana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMedijanaActionPerformed(evt);
            }
        });

        cbModus.setText("modus");
        cbModus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbModusItemStateChanged(evt);
            }
        });
        cbModus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbModusActionPerformed(evt);
            }
        });

        btnSelektujSve.setText("Selektuj sve");
        btnSelektujSve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelektujSveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelParametriLayout = new javax.swing.GroupLayout(panelParametri);
        panelParametri.setLayout(panelParametriLayout);
        panelParametriLayout.setHorizontalGroup(
            panelParametriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParametriLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelParametriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbModus)
                    .addComponent(cbKAsimetrije)
                    .addComponent(cbKvartilnaDevijacija)
                    .addComponent(cbStandDevijacija)
                    .addComponent(cbVarijansa)
                    .addComponent(cbKoeficijentVarijacije)
                    .addComponent(cbRazmakVarijacije)
                    .addComponent(cbSrednjaDevijacija)
                    .addComponent(cbMedijana)
                    .addComponent(cbPrviKvartil)
                    .addComponent(cbXBar)
                    .addComponent(cbTreciKvartil)
                    .addComponent(btnSelektujSve)
                    .addComponent(cbKSpljostenosti))
                .addGap(26, 26, 26))
        );
        panelParametriLayout.setVerticalGroup(
            panelParametriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParametriLayout.createSequentialGroup()
                .addComponent(btnSelektujSve)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbModus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbMedijana)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbXBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbPrviKvartil)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTreciKvartil)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbKvartilnaDevijacija)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbVarijansa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbStandDevijacija)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSrednjaDevijacija)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRazmakVarijacije)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbKoeficijentVarijacije)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbKSpljostenosti)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbKAsimetrije)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnIzracunajParametre.setText("Izracunaj selektovane parametre");
        btnIzracunajParametre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzracunajParametreActionPerformed(evt);
            }
        });

        txtRezultati.setColumns(20);
        txtRezultati.setRows(5);
        jScrollPane2.setViewportView(txtRezultati);

        btnAutomatik.setText("Automatsko popunjavanje");
        btnAutomatik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutomatikActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUzmiPodatkeIzTabele, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAutomatik))
                            .addComponent(btnKreiraj, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBrojRazlicitihObelezja, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelParametri, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIzracunajParametre)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(15, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtBrojRazlicitihObelezja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnKreiraj)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUzmiPodatkeIzTabele)
                                    .addComponent(btnAutomatik)))
                            .addComponent(panelParametri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnIzracunajParametre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKreirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajActionPerformed
        btnUzmiPodatkeIzTabele.setEnabled(true);
        btnAutomatik.setEnabled(true);

        DefaultTableModel model = (DefaultTableModel) tblNeprekidnoObelezje.getModel();

        model.getDataVector().removeAllElements();//
        //OVAKO SE BRISU SVI REDOVI TABELE
        //ja moram da brisem svaki put pre dodavanja novih redova

        int brojObelezja = 0;
        brojObelezja = Integer.parseInt(txtBrojRazlicitihObelezja.getText().trim());

        //moram preko modela da dodam
        for (int i = 0; i < brojObelezja; i++) {
            Object[] rowData = new Object[]{i + 1, "", ""};
            //sada preko modela pozivam fju za dodavanje reda
            model.insertRow(i, rowData);
        }
    }//GEN-LAST:event_btnKreirajActionPerformed

    private void btnUzmiPodatkeIzTabeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUzmiPodatkeIzTabeleActionPerformed
        btnSelektujSve.setEnabled(true);
        // TODO add your handling code here:
        nt = new NeprekidniTip(Integer.parseInt(txtBrojRazlicitihObelezja.getText().trim()));

        int ukupnoRedova = tblNeprekidnoObelezje.getRowCount();
        //  System.out.println(ukupnoRedova);
        DefaultTableModel model = (DefaultTableModel) tblNeprekidnoObelezje.getModel();

        //Odavde se uzimaju podaci i smestaju i nizove xi fi ci
        int j = 1, i = 0;
        for (i = 0; i < ukupnoRedova; i++) {
            nt.obelezje[i * 2] = Double.parseDouble((String) model.getValueAt(i, j));
        }

        j = 2;
        for (i = 0; i < ukupnoRedova; i++) {
            nt.obelezje[i * 2 + 1] = Double.parseDouble((String) model.getValueAt(i, j));

        }

        //popunjavamo kolonu sa indeksom 3
        j = 3;
        for (i = 0; i < ukupnoRedova; i++) {
            nt.srednjaVrednostIntervala[i] = (nt.obelezje[i * 2 + 1] + nt.obelezje[i * 2]) / 2.0;
            model.setValueAt(nt.srednjaVrednostIntervala[i], i, j);

        }

        for (i = 0; i < ukupnoRedova; i++) {
            nt.frekvencija[i] = Double.parseDouble((String) model.getValueAt(i, 4));
        }

        double suma = 0;

        for (i = 0; i < ukupnoRedova; i++) {
            suma = suma + nt.frekvencija[i];
            nt.ci[i] = suma;
            model.setValueAt(nt.ci[i], i, 5);
        }

        btnIzracunajParametre.setEnabled(true);

    }//GEN-LAST:event_btnUzmiPodatkeIzTabeleActionPerformed

    private void cbKAsimetrijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKAsimetrijeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbKAsimetrijeActionPerformed

    private void cbKSpljostenostiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKSpljostenostiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbKSpljostenostiActionPerformed

    private void cbKoeficijentVarijacijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKoeficijentVarijacijeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbKoeficijentVarijacijeActionPerformed

    private void cbRazmakVarijacijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRazmakVarijacijeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRazmakVarijacijeActionPerformed

    private void cbSrednjaDevijacijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSrednjaDevijacijaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSrednjaDevijacijaActionPerformed

    private void cbStandDevijacijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStandDevijacijaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbStandDevijacijaActionPerformed

    private void cbVarijansaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVarijansaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbVarijansaActionPerformed

    private void cbKvartilnaDevijacijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbKvartilnaDevijacijaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbKvartilnaDevijacijaActionPerformed

    private void cbTreciKvartilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTreciKvartilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTreciKvartilActionPerformed

    private void cbPrviKvartilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPrviKvartilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPrviKvartilActionPerformed

    private void cbXBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbXBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbXBarActionPerformed

    private void cbMedijanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMedijanaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMedijanaActionPerformed

    private void cbModusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbModusItemStateChanged

    }//GEN-LAST:event_cbModusItemStateChanged

    private void cbModusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbModusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbModusActionPerformed

    private void btnIzracunajParametreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzracunajParametreActionPerformed
        String message = "";
        if (cbModus.isSelected()) {
            message += "Modus: " + nt.modus() + "\n";
        }
        if (cbMedijana.isSelected()) {
            message += "Medijana: " + nt.median() + "\n";
        }
        if (cbXBar.isSelected()) {
            message += "XBar :" + nt.xBar() + "\n";
        }
        if (cbPrviKvartil.isSelected()) {
            message += "x(0.25)=" + nt.prviKvratil() + "\n";
        }
        if (cbTreciKvartil.isSelected()) {
            message += "x(0.75)=" + nt.cetvtiKvartil() + "\n";
        }
        if (cbKvartilnaDevijacija.isSelected()) {
            message += "Kvartilna devijacija: " + nt.kvartilnaDevijacija() + "\n";
        }
        if (cbVarijansa.isSelected()) {
            message += "Varijansa: " + nt.varijansa() + "\n";
        }
        if (cbStandDevijacija.isSelected()) {
            message += "Standardna devijacija: " + nt.standradnaDevijacija() + "\n";
        }
        if (cbSrednjaDevijacija.isSelected()) {
            message += "Srednja devijacija: " + nt.srednjaDevijacija() + "\n";
        }
        if (cbRazmakVarijacije.isSelected()) {
            message += "Razmak varijacije: " + nt.razmakVarijacije() + "\n";
        }
        if (cbKoeficijentVarijacije.isSelected()) {
            message += "Koeficijent varijacije: " + nt.koeficientVarijacije() + "\n";
        }
        if (cbKSpljostenosti.isSelected()) {
            message += "Koeficijent spljostenosti: " + nt.koeficientSpljostenosti() + "\n";;
        }
        if (cbKAsimetrije.isSelected()) {
            message += "Koeficijent asimetije:" + nt.koeficientAsimetrije() + "\n";

        }
        txtRezultati.setText(message);

    }//GEN-LAST:event_btnIzracunajParametreActionPerformed

    private void btnSelektujSveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelektujSveActionPerformed
        // TODO add your handling code here:
        cbModus.setSelected(true);
        cbMedijana.setSelected(true);
        cbXBar.setSelected(true);
        cbPrviKvartil.setSelected(true);
        cbTreciKvartil.setSelected(true);
        cbKvartilnaDevijacija.setSelected(true);
        cbVarijansa.setSelected(true);
        cbSrednjaDevijacija.setSelected(true);
        cbStandDevijacija.setSelected(true);
        cbRazmakVarijacije.setSelected(true);
        cbKAsimetrije.setSelected(true);
        cbKSpljostenosti.setSelected(true);
        cbKoeficijentVarijacije.setSelected(true);
    }//GEN-LAST:event_btnSelektujSveActionPerformed

    private void btnAutomatikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutomatikActionPerformed
        // TODO add your handling code here:
        nt=new NeprekidniTip(Integer.parseInt(txtBrojRazlicitihObelezja.getText().trim()));
        TableModel model=tblNeprekidnoObelezje.getModel();
        nt.obelezje[0]=Double.parseDouble((String) model.getValueAt(0, 1));
        nt.obelezje[1]=Double.parseDouble((String) model.getValueAt(0, 2));
        //System.out.println(nt.obelezje[0]);
        // System.out.println(nt.obelezje[1]);
        
        int i;
        double razlikaIntervala=nt.obelezje[1]-nt.obelezje[0];
       for(i=2;i<tblNeprekidnoObelezje.getRowCount()*2;i++){
            nt.obelezje[i]=nt.obelezje[i-1];
            
            model.setValueAt(String.valueOf(nt.obelezje[i]), i/2, 1);
            i++;
            nt.obelezje[i]=nt.obelezje[i-1]+razlikaIntervala;
            model.setValueAt(String.valueOf(nt.obelezje[i]), i/2, 2);//DOUBLE MORA U STRING ZATO STO JA POSLE U METODI UZMI PODATKE ZI TABELE ZAPRAVO UZIMAM STRINGOVE i njih koristim
            //AKO NE KONVERTUJEM U double u string imacu expcetion da double ne moze d a se konverutjhe u string pa ja to moram eksplicitno da napisem
            
        }
    }//GEN-LAST:event_btnAutomatikActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAutomatik;
    private javax.swing.JButton btnIzracunajParametre;
    private javax.swing.JButton btnKreiraj;
    private javax.swing.JButton btnSelektujSve;
    private javax.swing.JButton btnUzmiPodatkeIzTabele;
    private javax.swing.JCheckBox cbKAsimetrije;
    private javax.swing.JCheckBox cbKSpljostenosti;
    private javax.swing.JCheckBox cbKoeficijentVarijacije;
    private javax.swing.JCheckBox cbKvartilnaDevijacija;
    private javax.swing.JCheckBox cbMedijana;
    private javax.swing.JCheckBox cbModus;
    private javax.swing.JCheckBox cbPrviKvartil;
    private javax.swing.JCheckBox cbRazmakVarijacije;
    private javax.swing.JCheckBox cbSrednjaDevijacija;
    private javax.swing.JCheckBox cbStandDevijacija;
    private javax.swing.JCheckBox cbTreciKvartil;
    private javax.swing.JCheckBox cbVarijansa;
    private javax.swing.JCheckBox cbXBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelParametri;
    private javax.swing.JTable tblNeprekidnoObelezje;
    private javax.swing.JTextField txtBrojRazlicitihObelezja;
    private javax.swing.JTextArea txtRezultati;
    // End of variables declaration//GEN-END:variables

    private void prepareview() {
         btnUzmiPodatkeIzTabele.setEnabled(false);
    btnIzracunajParametre.setEnabled(false);
    txtRezultati.setEnabled(false);
    btnAutomatik.setEnabled(false);
    btnSelektujSve.setEnabled(false);
    }
}
